{
	"info": {
		"_postman_id": "684ea9e3-7c52-448a-bbc0-e448166021c3",
		"name": "TEST",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20864854"
	},
	"item": [
		{
			"name": "GET-запрос для получения списка пользователей",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains users\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    pm.expect(pm.response.json().length).to.be.above(0);  // Проверка, что в ответе есть хотя бы один пользователь\r",
							"});\r",
							"\r",
							"pm.test(\"Each user contains required fields\", function () {\r",
							"    let users = pm.response.json();\r",
							"    users.forEach(function(user) {\r",
							"        pm.expect(user).to.have.property('id');     // Проверка, что поле 'id' существует\r",
							"        pm.expect(user).to.have.property('name');   // Проверка, что поле 'name' существует\r",
							"        pm.expect(user).to.have.property('email');  // Проверка, что поле 'email' существует\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"User email is a valid format\", function () {\r",
							"    let users = pm.response.json();\r",
							"    users.forEach(function(user) {\r",
							"        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);  // Проверка, что email имеет правильный формат\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST-запрос для создания нового пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);  // Проверка, что статус код ответа равен 201 (Created)\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct user data\", function () {\r",
							"    let responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.name).to.eql(\"John Doe\");  // Проверка, что имя в ответе правильно\r",
							"    pm.expect(responseJson.email).to.eql(\"johndoe@example.com\");  // Проверка, что email в ответе правильный\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains id\", function () {\r",
							"    let responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.property('id');  // Проверка, что в ответе присутствует поле 'id'\r",
							"});\r",
							"\r",
							"pm.test(\"User address is correctly structured\", function () {\r",
							"    let responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.property('address');  // Проверка, что в ответе есть поле 'address'\r",
							"    pm.expect(responseJson.address).to.have.property('street');  // Проверка, что в 'address' есть поле 'street'\r",
							"    pm.expect(responseJson.address).to.have.property('city');    // Проверка, что в 'address' есть поле 'city'\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"John Doe\",\r\n  \"email\": \"johndoe@example.com\",\r\n  \"address\": {\r\n    \"street\": \"123 Main St\",\r\n    \"city\": \"Anytown\"\r\n  }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		}
	]
}